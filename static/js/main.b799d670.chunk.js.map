{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","duration","easing","items","map","item","className","key","type","id","value","text","onChange","e","setUpdate","target","onClick","deleteItem","icon","library","add","faTrash","App","handleInput","setState","currentItem","Date","now","addItem","preventDefault","newItem","state","filteredItems","filter","onSubmit","this","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yTAqCeA,EAhCG,SAACC,GAClB,OACC,6BACC,kBAAC,IAAD,CAAUC,SAAU,IAAKC,OAAO,eAC9BF,EAAMG,MAAMC,KAAI,SAACC,GAAD,OAChB,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KAC/B,2BACC,2BACCC,KAAK,OACLC,GAAIJ,EAAKE,IACTG,MAAOL,EAAKM,KACZC,SAAU,SAACC,GACVb,EAAMc,UAAUD,EAAEE,OAAOL,MAAOL,EAAKE,QAGvC,8BACC,kBAAC,IAAD,CACCD,UAAU,UACVU,QAAS,WACRhB,EAAMiB,WAAWZ,EAAKE,MAEvBW,KAAK,mB,uBCnBdC,IAAQC,IAAIC,K,IAgFGC,E,kDA7Ed,WAAYtB,GAAQ,IAAD,8BAClB,cAAMA,IAUPuB,YAAc,SAACV,GACd,EAAKW,SAAS,CACbC,YAAa,CACZd,KAAME,EAAEE,OAAOL,MACfH,IAAKmB,KAAKC,UAfM,EAoBnBC,QAAU,SAACf,GACVA,EAAEgB,iBACF,IAAMC,EAAU,EAAKC,MAAMN,YAC3B,GAAqB,KAAjBK,EAAQnB,KAAa,CACxB,IAAMR,EAAK,sBAAO,EAAK4B,MAAM5B,OAAlB,CAAyB2B,IACpC,EAAKN,SAAS,CACbrB,MAAOA,EACPsB,YAAa,CACZd,KAAM,GACNJ,IAAK,QA7BU,EAmCnBU,WAAa,SAACV,GACb,IAAMyB,EAAgB,EAAKD,MAAM5B,MAAM8B,QAAO,SAAC5B,GAAD,OAAUA,EAAKE,MAAQA,KACrE,EAAKiB,SAAS,CACbrB,MAAO6B,KAtCU,EA0CnBlB,UAAY,SAACH,EAAMJ,GAClB,IAAMJ,EAAQ,EAAK4B,MAAM5B,MACzBA,EAAMC,KAAI,SAACC,GACNA,EAAKE,MAAQA,IAChBF,EAAKM,KAAOA,MAGd,EAAKa,SAAS,CACbrB,WAhDD,EAAK4B,MAAQ,CACZ5B,MAAO,GACPsB,YAAa,CACZd,KAAM,GACNJ,IAAK,KANW,E,qDAuDlB,OACC,6BACC,0CACA,yBAAKD,UAAU,OACd,gCACC,0BAAMG,GAAG,aAAayB,SAAUC,KAAKP,SACpC,2BACCpB,KAAK,OACL4B,YAAY,aACZ1B,MAAOyB,KAAKJ,MAAMN,YAAYd,KAC9BC,SAAUuB,KAAKZ,cAEhB,4BAAQf,KAAK,UAAb,QAED,kBAAC,EAAD,CAAWL,MAAOgC,KAAKJ,MAAM5B,MAAOc,WAAYkB,KAAKlB,WAAYH,UAAWqB,KAAKrB,mB,GAtErEuB,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b799d670.chunk.js","sourcesContent":["import React from 'react';\nimport './ListItems.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport FlipMove from 'react-flip-move';\n\nconst ListItems = (props) => {\n\treturn (\n\t\t<div>\n\t\t\t<FlipMove duration={300} easing=\"ease-in-out\">\n\t\t\t\t{props.items.map((item) => (\n\t\t\t\t\t<div className=\"list\" key={item.key}>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tid={item.key}\n\t\t\t\t\t\t\t\tvalue={item.text}\n\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\tprops.setUpdate(e.target.value, item.key);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t<FontAwesomeIcon\n\t\t\t\t\t\t\t\t\tclassName=\"faicons\"\n\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\tprops.deleteItem(item.key);\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\ticon=\"trash\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t))}\n\t\t\t</FlipMove>\n\t\t</div>\n\t);\n};\n\nexport default ListItems;\n","import React, { Component } from 'react';\nimport ListItems from './ListItems';\nimport './App.css';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\n\n\nlibrary.add(faTrash);\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\titems: [],\n\t\t\tcurrentItem: {\n\t\t\t\ttext: '',\n\t\t\t\tkey: ''\n\t\t\t}\n\t\t};\n\t}\n\n\thandleInput = (e) => {\n\t\tthis.setState({\n\t\t\tcurrentItem: {\n\t\t\t\ttext: e.target.value,\n\t\t\t\tkey: Date.now()\n\t\t\t}\n\t\t});\n\t};\n\n\taddItem = (e) => {\n\t\te.preventDefault();\n\t\tconst newItem = this.state.currentItem;\n\t\tif (newItem.text !== '') {\n\t\t\tconst items = [...this.state.items, newItem];\n\t\t\tthis.setState({\n\t\t\t\titems: items,\n\t\t\t\tcurrentItem: {\n\t\t\t\t\ttext: '',\n\t\t\t\t\tkey: ''\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\n\tdeleteItem = (key) => {\n\t\tconst filteredItems = this.state.items.filter((item) => item.key !== key);\n\t\tthis.setState({\n\t\t\titems: filteredItems\n\t\t});\n\t};\n\n\tsetUpdate = (text, key) => {\n\t\tconst items = this.state.items;\n\t\titems.map((item) => {\n\t\t\tif (item.key === key) {\n\t\t\t\titem.text = text;\n\t\t\t}\n\t\t});\n\t\tthis.setState({\n\t\t\titems\n\t\t});\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>ToDo lists</h1>\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<header>\n\t\t\t\t\t\t<form id=\"to-do-form\" onSubmit={this.addItem}>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tplaceholder=\"Enter task\"\n\t\t\t\t\t\t\t\tvalue={this.state.currentItem.text}\n\t\t\t\t\t\t\t\tonChange={this.handleInput}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<button type=\"submit\">Add</button>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t\t<ListItems items={this.state.items} deleteItem={this.deleteItem} setUpdate={this.setUpdate} />\n\t\t\t\t\t</header>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}